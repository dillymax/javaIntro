		java 
			
 In java ; its is valid  statement;

hdd->ram->micro processor(cpu)

hdd -> storage type -> files    (magnetic technology used ,its nature is slow)
ram -> storage type ->bytes    (semi-conductor technology used so its naturally fast)
mp  -> storage type ->register (semi-conductor technology used )


hdd->RAM->MP
*ram is faster than hdd (when sending information to processor)
*register is faster than byte(ram)

source code(index.java) ->comipler ->bytecode ->jvm ->MLL -> processor

compiler ->convert source code into bytecode(intermidiate code it is portable)
jdk ->java development kit (using this you can write and run the java code)
jre ->java run time environment (OS will set up the environment for jre in RAM )
jvm -> java virtual machine (inside jre we have jvm + library tools)


github most commonly used comments
git init
git status
git add index.txt
git add -a
git add .
git log
git commit -m "first version"
git add remote origin url
git push -u master
git congif
git config -list
etc need to write more comments

eg:
class FirstProgram
{
public static void main(String args[])
{
System.out.println("hello world");
}
}

main method -> is starting point java program because whenever you run code then  jvm will first 
search the main method to start execute

static ->if you using static keyword(reserve word) in method , 
then jvm will not create object to access that method ,jvm direcly accessthat method

void ->its does'nt return anything instead void you can other return type alsoe eg : int , String , boolean etc

public ->when you make your method as public then that method can visible to everywhere or accessible to accross(entire) the project.

*In one java file you can write n number of classes but you must specify main method in one class for starting point of code
*when you make your class as public then that class name should be as file name otherwise it will error

indentifier
*its means names in java
*eg : class name , method name , varibles name and lable name .

reserve words or keywords
*already jvm have specail meaning for these keywords
*eg : if , else etc

datatypes
byte
short
int
long
double
flote
boolean

*during runtme jvm will allocate memorys in RAM
*so be carefull to create datatypes because whenever you creating more varibles then that time if your Ram size  is small  during
runtime it will throw error


COMPOSER
*if composer can't perform operation then it will check syntax part and type check only, 
it can perform operation whenever we using direct litral
*when perform with whole number with using any of operator then the resultant will be int only irrespective of where its store
*when you perform with wholeNumber as a direct literal then composer treat that whole number as int only 
either we can store byte or short
eg:
int a =10; (valid)
*when you perform with realNumber as a direct literal then composer treat that real number as double only 
float a = 10.5;  (invalid) 
float b = 10.5f; (valid)  here realNumber as a direct literal then composer treat that real number as double only 
                          so we put suffix 'f' at the end and to telling composer don't treat as double , treat as float 

*whenever you perform integer by integer it will lead truncation to Zero irrespective of where you store 
int a=25;
int b=2;       real value is 12.5
int c =a/b;   //12    truncation to Zero
float d =a/b; //12.0  truncation to Zero
*whenever you perform with varibles then composer came into the picture for type check because java is strictly type 
cheacked language
eg :
int a =10; (valid)
byte b=a; (invalid)Compile time error (here complier will check int can store in byte , answer is no )
*jvm only allocate memorys for varible and assign values to the varibles during runtime , 
compiler can,t assign values varibles it will only type check
eg:
int a=10;
int b=a+1;

Type Casting
*implicit type casting
*explicit type casting

1,char->byte->short->int->long->float->long
left to right(implicit type casting)
2, byte<-short<-int<-long<-float<-long
right to left (explicit type casting)


class Student{
    //by default jvm will fill the varibles with default values in heap area when you create obj for Student
    //instance varible
    int id;
    int age;
    String name;
}
class Student{
     //instance varible
    int a; 
    public static void main(){
        //creating obj using new keyword and storing into the Student type varible
        //std ->refference varible because we here storing Student type object
int local ;
System.out.println(local) //0
System.out.println(local); //CE : because jvm only initialize default values to 
                                  instance varible in heap area only not an local varible so we should initial local varible ,
                                  if you declared is not a issue when you using that local variable without initialize 
                                  the value then that compile time error
    Student std = new Student();
    std.name = "dilly";
    std.age =22;
    }
}

//default value for datatypes
int ->0
boolean ->false
float ->0.0
string ->null

//DURING EXCUTION(RUN TIME) TIME JVM WILL ALLOCATE MEMORIES AND EXCUTE 
//HEAP AND STACK AND METHOD AREA
RAM->collections of bytes
RAM->JRE->JVM+library files.

*JVM search main method in method area and invoking that method and put it into the stack area because 
main thread start excute whichever method present in stack area only otherwise program didn'nt execute anything.

METHOD AREA
We have .class files HERE DURING runtime
HEAP AREA
*whenever you create obj in program  , jvm will allocate memorys for 
obj in  heap area at the same time jvm will  allocate memorys for instance varible and fill with default vaules in part of obj

Stack Area:
*JVM search main method in method area and invoking that method and put it into the stack area that time 
one stack frame will be created because main thread start excute whichever method present in stack area only
 otherwise program didn'nt execute anything.
*jvm will allocate memorys for local variable in stack area ,this variable scope is available untill method execute complete.
*whenever you calling one method that time one stack fram will be created on stack area.

Method overloading
*method name is same and type signature is different is called as method overloading.
return type maybe same or may not be same it doesn't matter
->1:many method overloading concept is one method doing one activity only so its false polymorphism.
comiler will resolve issue of method overloading or compile time polymorphism.
*compiler will check
1->number of parameters had method
2->number of data type  had method
3->order of the type of the parameters  

loop
----
n-1
n-1/4
n-1/2
n*3/4

diagonal one ->i==j         eg :\
diagonal two ->i+j==n-1     eg :/


Array
*it is store large amount data in single variable
*array treated as object , using new keyword we creat array
eg :  int a[] = new int[5];
*array space will be allocated in heap area
*it will be store homogenes(same data type values) type data.
*array size will be byte , short , int ,char type only.
*every primitive type array will have classes that class not for developers ,its only for jvm at runtime.


one dimensional array
new int[5];
two dimensional array
new int[3][3]
multi dimensional array
new int[][][];

2D JAGGED Array
int [] a =new int[3][];
a.[0]=new int[4];
a.[1]=new int[4];
a.[3]=new int[4];

*without class we dont create object

advantage of array;
*if array size is known to you and storing similar type of 
data go for array not collections because array is fast and more efficient.

Disadvantage:
*Array store homogenes(same data type) type data only.
*Array need contigueous memory location.

loop concept :
for(statement1;statement2;statement3){
    statement4;
}
statement1 ->it can be any statement ,we would suggest for initailization purpose
statement2 ->it should be return boolean type 
statement3 ->it can be any statement , we would suggest for increment/decrement variable
statement4 ->it can be any statement

while loop:
*here initailization and incrementation is optional
while(statement1){
statement2
}
statement1 ->it should be return boolean type 
statement2 ->it can be any statement.

Do While Loop:
do{
statement2
}while(statement1)
statement1 ->it should be return boolean type 
statement2 ->it can be any statement.

Enhanced For Loop/For each loop:
for(datatype variable : arrayName){
    statement;
}

eg:
int [] a =new int[3];
a[0]=1;
a[1]=2;
a[2]=3;
for(int elem : a){ //here 'a' will get one element at a time from array and to store that element int type varibale
    System.out.println(elem);
}

Auto Array:1D
int a = {1,2,3,4}; // new int[5];

Auto Array:2D  
//3 class each class will have different number of Students
int a = {{1,2,3,4},{1,2,3},{1,2,3,4}};  // new int[3][3]

Auto Array:3D 
 //here 1 school have class each class will have different number of Students
int a = {{{1,2,3,4},{1,2,3},{1,2,3,4}}}; // new int[][][];

eg:
public class Array1 {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//3D array 
		//2 school , 2 class ,each different number of students
		int[][][] a={
				{{1,2},{1,2}} ,
				{{9,10},{11,12}}
				};
		System.out.println(a[1][0][1]);
	}

}



STRING:
memory :heap area , inside heap area we scp area(string constant pool)
mutable string  ->string
immutable string->stringbuilder , stringbuffer.

STRING:
*It is class , so we can creat obj for string.
eg:
String str = "dilly";
*whenever you perform with the direct litral,that obj will be created in scp only not in heap area.
*garbage collector concept not work in scp area.

b,
String str = new String("dilly");
*whenever you create string using new keyword with litral , 
that time obj will be created in heap area and one copy will be maitean in scp also for jvm purpose.
but no one reffering that obj .but doesn'nt get deleted because garbage collector concept not work in scp area.


note:
*In String If compiler can eveluvate then memory will be allocated in scp area 
*In String if JVM can evaluvate then memory will be allocate in heap area

Stringbuffer vs stringbuilder
*stringbuffer and stringbuilder is almost same and having most methods as common.
*Stringbuffer is Synchronized 
*stringBuilder is not Synchronized


static

STATIC VARIABLE,BLOCK , METHOD

JVM ARCHITECT
During .class file loading jvm have three sub-system
1.loading
2.linking
3.initialization

1.loading ->loading have three parts namely

extension and application class loader will load our .class and giving delegate to 
bootstrap loader to load inbuilt class what we used in our code. eg:scanner etc
then all work together giving that class to linking sub-system
*extension class loader  
*aplication class loader 
*bootstrap class loader 

2.linking ->having three parts 
*verify   ->it will verify our code like a hacker . any hacking or suspciouse thing happenden our cde
*prepare  ->it will check any VIP are there ,here VIP are static varibale.
            if static varibale are present in our code then jvm invoke the code put into stack area then 
			that will execute first then memory will be allocated in heap area
*resolve  ->it will resolve everthing giving responsibility to the initialization sub-system of loading.

3.initialization 
*here jvm excute static block .jvm invoke static block and put into the stack area.


after loading jvm will invoke all the .class files put into the method area.
then jvm search and invoke the static method of main method and put into the stack for to excute our code

pc registers:
*In stack area during execution each statements will have some address that address stored in pc register
*in java this is ; considered as one statement

excution engine:
*intrepreter

priority of execution
*static variable 
*static block
*static method
*instance variable
*java block or initialization block 
*super or this method
*constructor body

Inheritance
*parent can have mulitiple child but  child can't have mulitiple parent

*SUPER keyword is present to access parent class instance variable
*super() method to call parent class constructor.
*this() method to call another constructor within the same class
*this keyword is holding current object refference

Inheritance supporte
*single and multi level hierarchy Inheritance
*mulitiple level Inheritance will not be supported in java

final keyword
*class   ->we can't Inherite 
*method  ->we can inherite but we can't overidden this final method
*variable ->we can't change again once we initialized




